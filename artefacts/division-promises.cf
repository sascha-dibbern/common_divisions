#
# *cfdivisions_bundlesequence = artefacts,artefacts_hub,setup_artefacts_cache
# *cfdivisions_depends = library_configuration,cfengine,specific_users
#
# library_configuration defined data
# * artefacts_location => optional: full path to artefacts location on artefacts server. Default '$(sys.workdir)/artefacts'


body file control
{
    namespace => "common_divisions";
}

bundle common artefacts
{
  classes:
    any::
      "location_defined"
         not => strcmp("$(library_configuration.artefacts_location)","");

  vars:
    location_defined::
      "location"
        string  => "$(library_configuration.artefacts_location)",
        comment => "The artefacts directory on the policy host",
        handle  => "vars_artefacts_location";

    !location_defined::
      "location"
        string  => "$(sys.workdir)/artefacts",
        comment => "The artefacts directory on the policy host",
        handle  => "vars_artefacts_location";

    any::
      "hub"
        string  => "$(sys.policy_hub)",
        comment => "The artefacts host",
        handle  => "vars_artefacts_hub";

      "cache"
        string  => "$(sys.workdir)/artefacts-cache",
        comment => "The artefacts directory on the agent host",
        handle  => "vars_artefacts_cache";
}

bundle agent setup_artefacts_cache
{
  vars:
    !DEBUG::
      "mode" string => "700";
    DEBUG::
      "mode" string => "766";

  files:
    any::
      "$(artefacts.cache)/."
        perms  => default:mog("$(mode)","$(specific_users.superuser)","$(specific_users.superuser)"),
        create => "true";
}

bundle agent artefacts_update(source,destination,mode,user,group,class)
{
  files:
   "$(destination)"
     comment      => "Copy recursively artefacts $(destination) from artefacts source $(source) on policy server if a new validation was acquired",
     handle       => "artefacts_update",
     copy_from    => artefacts_rcp("$(artefacts.location)/$(source)","$(artefacts.hub)"),
     depth_search => artefacts_recurse("inf"),
     file_select  => artefacts_input_files,
     perms        => default:mog("$(mode)","$(user)","$(group)"),
     action       => artefacts_immediate,
     classes      => artefacts_promise_state("$(class)"),
     create       => "true";
}

bundle agent artefacts_cache(artefacts,class)
{
  vars:
    !DEBUG::
      "mode" string => "700";
    DEBUG::
      "mode" string => "766";

  methods:
    any::
      "update_artefact"
        usebundle => common_divisions:artefacts_update(
          "$(artefacts)",
          "$(artefacts.cache)",
          "$(mode)","$(specific_users.superuser)","$(specific_users.supergroup)",
          "$(class)"
        );
  
  reports:
    any::
      "Artefacts cache ($(artefacts.location)/$(artefacts)) updated."
        ifvarclass => "$(class)_repaired";
}

bundle agent artefacts_update_file(source,destination,mode,user,group,class)
{
  files:
   "$(destination)"
     comment      => "Copy an artefact $(destination) from artefacts source $(source)on policy server if a new validation was acquired",
     handle       => "artefacts_update_files",
     copy_from    => artefacts_rcp("$(artefacts.location)/$(source)","$(artefacts.hub)"),
     file_select  => artefacts_input_files,
     perms        => default:mog("$(mode)","$(user)","$(group)"),
     action       => artefacts_immediate,
     classes      => artefacts_promise_state("$(class)"),
     create       => "true";
}

bundle agent artefacts_cache_file(artefact_file_destination,class)
{
  vars:
    !DEBUG::
      "mode" string => "700";
    DEBUG::
      "mode" string => "766";

  methods:
    any::
      "update_artefact_file"
        usebundle => common_divisions:artefacts_update_file(
          "$(artefact_file_destination)",
          "$(artefacts.cache)/$(artefact_file_destination)",
          "$(mode)","$(specific_users.superuser)","$(specific_users.supergroup)",
          "$(class)"
        );
  
  reports:
    any::
      "Artefact-file cache ($(artefacts.location)/$(artefact_file_destination)) updated."
        ifvarclass => "$(class)_repaired";
}

bundle agent artefacts_hub
{
  files:
    am_policy_hub::
      "$(artefacts.location)/"
        create       => "true",
        perms        => default:mog("755","$(cfengine_id.user)","$(cfengine_id.group)"),
        depth_search => artefacts_recurse("inf");
}

bundle server artefacts_hub_access_rules
{
  access:
    any::
      "$(artefacts.location)"
        handle  => "artefacts_hub_access_rules",
        comment => "Grant access to the policy updates",
        admit   => { ".*$(def.domain)", @(def.acl) };
}

body action artefacts_immediate
{
  ifelapsed => "0";
}

body copy_from artefacts_rcp(from,server)
{
  source   => "$(from)";
  compare  => "digest";
  trustkey => "false";

  !am_policy_hub::
    servers => { "$(server)" };
}

body file_select artefacts_input_files
{
  leaf_name   => { ".*" };
  file_result => "leaf_name";
}

body depth_search artefacts_recurse(d)
{
  depth        => "$(d)";
  exclude_dirs => { "\.svn", "\.git" };
}

body classes artefacts_promise_state(x)
{
  promise_repaired => { "$(x)_repaired" };
  promise_kept     => { "$(x)_kept" };
}
