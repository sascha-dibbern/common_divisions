#
# *cfdivisions_bundlesequence = firewall_iptables_default,firewall_iptables_module_setup 
# *cfdivisions_depends = cfengine
#

body file control
{
    namespace => "common_divisions";
}

body contain firewall_iptables_shell_command
{
    useshell  => "yes";
    no_output => "yes";
}


bundle common firewall_iptables(path_arg,module_arg)
{
  classes:
    linux::
      "firewall_iptables_exist"
        expression => fileexists($(path));

  vars:
    linux::
      "path"
        string => $(path_arg);

      "module"
        string => $(module_arg);
}

bundle agent firewall_iptables_default
{
  classes:
    linux::
      "default_firewall_iptables_exist"
        expression => fileexists($(path));

  vars:
    linux::
      "path"
        string => "/sbin/iptables";

      "module"
        string => "firewall-iptables";

  methods:
    default_firewall_iptables_exist::
      "defaulting_values" 
        usebundle => firewall_iptables($(path),$(module));
}

bundle agent firewall_iptables_module_setup 
{
  methods:
    firewall_iptables_exist::
      "$(firewall_iptables.module)" 
        usebundle => common_divisions:cfengine_division_module_update("common_divisions","firewall_iptables","$(firewall_iptables.module)");
}

body classes iptables_services_setup_class
{
      scope => "bundle";
      promise_kept => { "iptables_services_installed" };
}

body classes firewalld_service_remove_class
{
      scope => "bundle";
      promise_kept => { "firewalld_service_uninstalled" };
}

# Inspired by https://www.digitalocean.com/community/tutorials/how-to-migrate-from-firewalld-to-iptables-on-centos-7
bundle agent firewall_iptables_services_only(iptables_def_file)
{
  services:
    common_divisions:redhat_alike::
      "firewalld"
        service_policy => "stop",
        service_method => common_divisions:standard_service; 

      "firewalld" 
        service_policy => "disable",
        service_method => common_divisions:standard_service; 

  packages:
    common_divisions:redhat_alike::
      "firewalld"
         policy         => "absent",
         package_module => default:yum,
         classes        => firewalld_service_remove_class;

      "iptables-services"
         policy         => "present",
         package_module => default:yum,
         classes        => iptables_services_setup_class;

  files:
    iptables_services_installed::
      "/etc/sysconfig/iptables"
        changes      => default:detect_all_change,
        copy_from    => default:local_dcp("$(iptables_def_file)"),
	depth_search => default:recurse("inf"),
        perms        => default:mog(
          "600",
          "root",
          "root"
        ),
        classes      => default:if_repaired("iptables_restart_required");

  services:
    common_divisions:redhat_alike::
      "iptables" 
        service_policy => "enable",
        service_method => common_divisions:standard_service; 

      "iptables" 
        service_policy => "start",
        service_method => common_divisions:standard_service; 

    iptables_restart_required::
      "iptables" 
        service_policy => "restart",
        service_method => common_divisions:standard_service; 
}


bundle agent firewall_iptables_open_INPUT_allsources(protocol,portnum,classname)
{
  classes:
    firewall_iptables_exist::
      "firewall_iptables_open_INPUT_allsources_$(protocol)_$(portnum)"
        expression => usemodule ("$(firewall_iptables.module)","--action=allow_inputaccept --protocol=$(protocol) --portnumber=$(portnum) --states=NEW --cfclass=$(classname)");
}


bundle agent firewall_iptables_close_INPUT_allsources(protocol,portnum,classname)
{
  classes:
    firewall_iptables_exist::
      "firewall_iptables_close_INPUT_allsources_$(protocol)_$(portnum)"
        expression => usemodule ("$(firewall_iptables.module)","--action=remove_inputaccept --protocol=$(protocol) --portnumber=$(portnum) --states=NEW --cfclass=$(classname)");
}

bundle agent firewall_iptables_query_INPUT_allsources(protocol,portnum,classname)
{
  classes:
    firewall_iptables_exist::
      "firewall_iptables_query_INPUT_allsources_$(protocol)_$(portnum)"
        expression => usemodule ("$(firewall_iptables.module)","--action=exist_inputaccept --protocol=$(protocol) --portnumber=$(portnum) --states=NEW --cfclass=$(classname)");
}

bundle agent firewall_iptables_open_INPUT_sourcebased(source,protocol,portnum,classname)
{
  classes:
    firewall_iptables_exist::
      "firewall_iptables_open_INPUT_allsources_$(protocol)_$(portnum)"
        expression => usemodule ("$(firewall_iptables.module)","--action=allow_inputaccept --source=$(source) --protocol=$(protocol) --portnumber=$(portnum) --states=NEW --cfclass=$(classname)");
}

bundle agent firewall_iptables_close_INPUT_sourcebased(source,protocol,portnum,classname)
{
  classes:
    firewall_iptables_exist::
      "firewall_iptables_close_INPUT_allsources_$(protocol)_$(portnum)"
        expression => usemodule ("$(firewall_iptables.module)","--action=remove_inputaccept --source=$(source) --protocol=$(protocol) --portnumber=$(portnum) --states=NEW --cfclass=$(classname)");
}

bundle agent firewall_iptables_query_INPUT_sourcebased(source,protocol,portnum,classname)
{
  classes:
    firewall_iptables_exist::
      "firewall_iptables_query_INPUT_allsources_$(protocol)_$(portnum)"
        expression => usemodule ("$(firewall_iptables.module)","--action=exist_inputaccept --source=$(source) --protocol=$(protocol) --portnumber=$(portnum) --states=NEW --cfclass=$(classname)");
}

#====================================================

bundle agent old_firewall_iptables_close_INPUT_allsources(protocol,portnum,classname)
{
  classes:
    "rule_exists" 
      expression => regcmp("\d+","$(rulenum)");

  vars:
    firewall_iptables_exist::
      "rulenum" 
        string => execresult(
          "$(firewall_iptables.path) -L --line-numbers -n | /usr/bin/perl -F'/\s+/' -ane 'print $F[0] if ($F[2] eq \"$(protocol)\") and  ($F[4] eq \"0.0.0.0/0\") and ($F[9] eq \"dpt:$(portnum)\")'",
          "useshell"
        ),
        policy => "overridable";

  commands:
    rule_exists.firewall_iptables_exist::
      "$(firewall_iptables.path) -D INPUT $(rulenum)"
        contain => firewall_iptables_shell_command;
#      "/sbin/service iptables save; echo 'Save firewall change $(protocol):$(portnum)'"
#        contain => firewall_iptables_shell_command;

    !rule_exists.firewall_iptables_exist::
      "/bin/echo '-$(classname)' || /bin/echo ''"
        contain => firewall_iptables_shell_command,
        module  => "true";
}

bundle agent old_firewall_iptables_query_INPUT_allsources(protocol,portnum,classname)
{
  classes:
    "rule_exists" 
      expression => regcmp("\d+","$(rulenum)");

  vars:
    firewall_iptables_exist::
      "rulenum" 
        string => execresult(
          "$(firewall_iptables.path) -L --line-numbers -n | /usr/bin/perl -F'/\s+/' -ane 'print $F[0] if ($F[2] eq \"tcp\") and  ($F[4] eq \"0.0.0.0/0\") and ($F[9] eq \"dpt:$(portnum)\")'",
          "useshell"
        ),
        policy => "overridable";

  commands:
    rule_exists.firewall_iptables_exist::
      "/bin/echo '+$(classname)' || /bin/echo ''"
        contain => firewall_iptables_shell_command,
        module  => "true";
    !rule_exists.firewall_iptables_exist::
      "/bin/echo '-$(classname)' || /bin/echo ''"
        contain => firewall_iptables_shell_command,
        module  => "true";
}

#
# Traffic from certain sources
#
bundle agent old_firewall_iptables_open_INPUT_sourcebased(source,protocol,portnum,classname)
{
  classes:
    "rule_exists" 
      expression => regcmp(".+","$(rulenum)");

  vars:
    firewall_iptables_exist::
      "rulenum" 
        string => execresult(
          "$(firewall_iptables.path) -L --line-numbers -n | /usr/bin/perl -F'/\s+/' -ane 'print $F[0] if ($F[2] eq \"tcp\") and ($F[4] eq \"$(source)\") and ($F[9] eq \"dpt:$(portnum)\")'",
          "useshell"
        ),
        policy => "overridable";

  commands:
    !rule_exists.firewall_iptables_exist::
      "$(firewall_iptables.path) -I INPUT 1 -m state --state NEW -m $(protocol) -s $(source) -p $(protocol) --dport $(portnum) -j ACCEPT"
        contain => firewall_iptables_shell_command;
#      "/sbin/service iptables save; echo 'Save firewall change $(protocol):$(portnum)'"
#        contain => firewall_iptables_shell_command;

    rule_exists.firewall_iptables_exist::
      "/bin/echo '+$(classname)' || /bin/echo ''"
        contain => firewall_iptables_shell_command,
        module  => "true";
}


bundle agent old_firewall_iptables_close_INPUT_sourcebased(source,protocol,portnum,classname)
{
  classes:
    "rule_exists" 
      expression => regcmp("\d+","$(rulenum)");

  vars:
    firewall_iptables_exist::
      "rulenum" 
        string => execresult(
          "$(firewall_iptables.path) -L --line-numbers -n | /usr/bin/perl -F'/\s+/' -ane 'print $F[0] if ($F[2] eq \"tcp\") and  ($F[4] eq \"$(source)\") and ($F[9] eq \"dpt:$(portnum)\")'",
          "useshell"
        ),
        policy => "overridable";

  commands:
    rule_exists.firewall_iptables_exist::
      "$(firewall_iptables.path) -D INPUT $(rulenum)"
        contain => firewall_iptables_shell_command;
#      "/sbin/service iptables save; echo 'Save firewall change $(protocol):$(portnum)'"
#        contain => firewall_iptables_shell_command;

    !rule_exists.firewall_iptables_exist::
      "/bin/echo '-$(classname)' || /bin/echo ''"
        contain => firewall_iptables_shell_command,
        module  => "true";
}

bundle agent old_firewall_iptables_query_INPUT_sourcebased(protocol,portnum,classname)
{
  classes:
    "rule_exists" 
      expression => regcmp("\d+","$(rulenum)");

  vars:
    firewall_iptables_exist::
      "rulenum" 
        string => execresult(
          "$(firewall_iptables.path) -L --line-numbers -n | /usr/bin/perl -F'/\s+/' -ane 'print $F[0] if ($F[2] eq \"tcp\") and  ($F[4] eq \"$(source)\") and ($F[9] eq \"dpt:$(portnum)\")'",
          "useshell"
        ),
        policy => "overridable";

  commands:
    rule_exists.firewall_iptables_exist::
      "/bin/echo '+$(classname)' || /bin/echo ''"
        contain => firewall_iptables_shell_command,
        module  => "true";
    !rule_exists.firewall_iptables_exist::
      "/bin/echo '-$(classname)' || /bin/echo ''"
        contain => firewall_iptables_shell_command,
        module  => "true";
}
